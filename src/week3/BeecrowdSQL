--2602:

select name
from customers
where state = 'RS';

--2603:

select name, street
from customers
where city = 'Porto Alegre';

--2604:

select id, name
from products
where price < 10 or price > 100;

--2605:

SELECT pd.name, pv.name
FROM products pd
INNER JOIN providers pv
ON pd.id_providers	= pv.id
WHERE pd.id_categories = 6;

--2606:

SELECT p.id, p.name
FROM products p
INNER JOIN categories c
ON p.id_categories = c.id
WHERE c.name LIKE 'super%';

--2607:

SELECT DISTINCT city
FROM providers
ORDER BY city ASC;

--2608:
select max(price) as price, min(price) as price
from products;

--2609:

SELECT c.name, SUM(p.amount)
FROM categories c
INNER JOIN products p
ON c.id = p.id_categories
GROUP BY c.name
--2610:
select round(avg(price), 2) as price
from products
--2611:
SELECT m.id, m.name
FROM movies m
INNER JOIN genres g
ON m.id_genres = g.id
WHERE LOWER(g.description) = 'action';

--2613:

SELECT movies.id,movies.name
FROM movies
INNER JOIN prices
ON movies.id_prices=prices.id
WHERE prices.value < 2.00;

--2614:

select c.name,r.rentals_date
from customers as c
inner join rentals as r
on c.id=r.id_customers
where r.rentals_date>='2016-09-01'
and r.rentals_date<='2016-09-30';

--2615:

select distinct city from customers;

--2616:

select id,name
from customers
where id not in(select id_customers from locations);

--2617:

select products.name,providers.name
from products
inner join providers
on providers.id=products.id_providers
where providers.name='Ajax SA';

--2618:

SELECT products.name,providers.name,categories.name
FROM products
INNER JOIN providers
ON products.id_providers = providers.id
INNER JOIN categories
ON products.id_categories = categories.id
WHERE providers.name = 'Sansul SA' AND categories.name = 'Imported';

--2619:

select p.name,pr.name,p.price
from products as p
inner join providers as pr on p.id_providers=pr.id
inner join categories as c on p.id_categories=c.id
where price>1000 and c.name='Super Luxury';

--2620:

SELECT c.name, o.id
FROM customers c
INNER JOIN orders o
ON c.id = o.id_customers
WHERE o.orders_date BETWEEN '2016-01-01' AND '2016-06-30';

--2621:

select p.name
from products p
inner join providers pv
ON p.id_providers = pv.id
WHERE pv.name LIKE 'P%' AND p.amount BETWEEN 10 AND 20;

--2622:

SELECT c.name
FROM customers c
INNER JOIN legal_person l
ON c.id = l.id_customers;

--2623:

SELECT p.name, c.name
FROM products p
INNER JOIN categories c
ON p.id_categories = c.id
WHERE p.amount > 100 AND p.id_categories IN(1, 2, 3, 6, 9);

--2624:

SELECT COUNT (DISTINCT city)
FROM customers;

--2625:

SELECT substring(cpf, 1, 3 ) || '.' || substring(cpf, 4, 3 ) || '.' || substring(cpf, 7, 3) || '-' || substring(cpf, 10, 2)
FROM natural_person ;

--2637:

SELECT name, customers_number
FROM lawyers
WHERE customers_number = (
        SELECT Max(customers_number) FROM lawyers
    )
UNION ALL
    SELECT name, customers_number
    FROM lawyers
        WHERE customers_number = (
            SELECT Min(customers_number)
            FROM   lawyers
        )
UNION ALL
    SELECT 'Average' AS name, Round(Avg(customers_number), 0) AS customers_number
    FROM lawyers;

--2638:

SELECT
   candidate.name,
   cast((((score.math*2) + (score.specific*3) + (score.project_plan*5)) / 10) as decimal(10, 2)) as avg
FROM candidate
JOIN score
on candidate.id = score.candidate_id
ORDER by avg DESC;

--2739:

SELECT name,
cast(EXTRACT(DAY FROM payday) AS INT) as day
FROM loan;

--2740:

(
SELECT concat('Podium: ', team) as name
FROM league
WHERE position <= 3
)
UNION ALL
(
SELECT concat('Demoted: ', team) as name
FROM league
WHERE position >= 14
);

--2741:

select concat('Approved: ',name) as name, grade
from students
where grade >=7
order by grade DESC;

--2742:

SELECT l.name, round((l.omega * 1.618), 3) AS "Fator N"
FROM life_registry l
JOIN dimensions d
ON l.dimensions_id = d.id
WHERE d.name in ('C875', 'C774') AND l.name LIKE 'Richard%'
ORDER BY l.omega ASC;

--2743:

SELECT name, char_length(name) AS length
FROM people
ORDER BY length DESC;

--2744:

SELECT id, password, MD5(password) AS MD5
FROM account ;

--2745:

SELECT name, round(((salary * 10) / 100), 2) AS tax
FROM people
WHERE salary > 3000;

--2746:

SELECT replace(name, 'H1', 'X') AS name
FROM virus;

--2988:

SELECT
(
    SELECT name
    FROM teams t1
    WHERE t1.id = team.id
) as name,

(
    SELECT count(team_1)
    FROM matches
    WHERE team_1 = team.id
)+(
    SELECT count(team_2)
    FROM matches WHERE
    team_2 = team.id
) as matches,
(
    SELECT sum(case when team_2_goals > team_1_goals then 1 else 0 END) as victories
    FROM teams t INNER JOIN matches m ON t.id = m.team_2
    WHERE t.id = team.id
)+(
    SELECT sum(case when team_1_goals > team_2_goals then 1 else 0 END)
    FROM teams t INNER JOIN matches m ON t.id = m.team_1
    WHERE t.id = team.id
) as victories,

(
    SELECT sum(case when team_2_goals < team_1_goals then 1 else 0 END) as victories
    FROM teams t INNER JOIN matches m ON t.id = m.team_2
    WHERE t.id = team.id
)+(
    SELECT sum(case when team_1_goals < team_2_goals then 1 else 0 END)
    FROM teams t INNER JOIN matches m ON t.id = m.team_1
    WHERE t.id = team.id
) as defeats,

(
    SELECT sum(case when team_2_goals = team_1_goals then 1 else 0 END) as victories
    FROM teams t INNER JOIN matches m ON t.id = m.team_2
    WHERE t.id = team.id
)+(
    SELECT sum(case when team_1_goals = team_2_goals then 1 else 0 END)
    FROM teams t INNER JOIN matches m ON t.id = m.team_1
    WHERE t.id = team.id
) as draws,
(
    SELECT sum(case when team_2_goals > team_1_goals then 3 when team_2_goals = team_1_goals then 1 else 0 END) as victories
    FROM teams t INNER JOIN matches m ON t.id = m.team_2
    WHERE t.id = team.id
)+(
    SELECT sum(case when team_1_goals > team_2_goals then 3 when team_1_goals = team_2_goals then 1 else 0 END)
    FROM teams t INNER JOIN matches m ON t.id = m.team_1
    WHERE t.id = team.id
) as score


FROM teams team
ORDER BY score DESC;

---2990:

SELECT e.cpf, e.enome, d.dnome
FROM departamentos d
INNER JOIN empregados e ON d.dnumero = e.dnumero
  LEFT JOIN trabalha t ON t.cpf_emp = e.cpf
  LEFT JOIN projetos p ON t.pnumero = p.pnumero
WHERE p.pnumero IS NULL
ORDER BY e.cpf;

--2993:

SELECT amount as most_frequent_value
FROM value_table
GROUP BY amount
ORDER BY count(amount) DESC
LIMIT 1;

--2994:

SELECT d.name, round(sum((a.hours * 150.0) + (((a.hours * 150.0) * w.bonus) / 100.0)), 1) as salary
FROM doctors d INNER JOIN attendances a ON d.id = a.id_doctor
               INNER JOIN work_shifts w ON w.id = a.id_work_shift
GROUP BY d.id
ORDER BY salary DESC;

--2995:

SELECT temperature, COUNT(temperature) AS "number_of_records"
FROM records
GROUP BY mark, temperature
ORDER BY mark;

--2996:

SELECT
	P.year,
	senderTB.name AS "sender",
	receiverTB.name AS "receiver"
FROM
	packages P
	LEFT JOIN users senderTB ON P.id_user_sender = senderTB.id
	LEFT JOIN users receiverTB ON P.id_user_receiver = receiverTB.id
WHERE
	( P.color = 'blue' OR P.year = 2015 )
	AND 'Taiwan' NOT IN (senderTB.address, receiverTB.address)
ORDER BY
	P.year DESC;

--3001:

SELECT p.name,
CASE
    WHEN p.type = 'A' THEN 20.0
    WHEN p.type = 'B' THEN 70.0
    ELSE 530.5
END AS price
FROM products p
ORDER BY p.type asc, p.id desc;